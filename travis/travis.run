#!/usr/bin/env bash
#
# Copyright (c) 2012-2019 DreamWorks Animation LLC
#
# All rights reserved. This software is distributed under the
# Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
#
# Redistributions of source code must retain the above copyright
# and license notice and the following restrictions and disclaimer.
#
# *     Neither the name of DreamWorks Animation nor the names of
# its contributors may be used to endorse or promote products derived
# from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
# LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
#
#
# Travis build script
#
# Builds OpenVDB and all dependent libraries on a Travis VM for a specific build combination
#
# TASK (install/script):
#        * install (downloading and building all dependent libraries)
#        * script (building OpenVDB and executing unit tests)
# ABI (3/4/5) - the ABI version of OpenVDB
# BLOSC (yes/no) - to build with Blosc support
# RELEASE (yes/no) - to build in release or debug mode
# HOUDINI_MAJOR (16.0/16.5) - the major version of Houdini
#
# (Note Travis instances allow only 7.5GB of memory per VM, so limit concurrent builds to 4)
#
# Author: Dan Bailey

set -ex

TASK="$1"
ABI="$2"
BLOSC="$3"
RELEASE="$4"
HOUDINI_MAJOR="$5"
COMPILER="$6"

COMMON_ARGS="CXX=$HOME/ccache_compiler DESTDIR=/tmp/OpenVDB"

# Location of third-party dependencies for standalone and houdini builds
STANDALONE_ARGS="   BOOST_LIB_DIR=/usr/lib/x86_64-linux-gnu\
                    EXR_INCL_DIR=/usr/include/OpenEXR\
                    EXR_LIB_DIR=/usr/local/lib\
                    TBB_LIB_DIR=/usr/lib\
                    CONCURRENT_MALLOC_LIB=\
                    CPPUNIT_INCL_DIR=/test/cppunit/include\
                    CPPUNIT_LIB_DIR=/test/cppunit/lib\
                    LOG4CPLUS_INCL_DIR=/usr/include\
                    LOG4CPLUS_LIB_DIR=/usr/lib/x86_64-linux-gnu\
                    GLFW_INCL_DIR=/usr/include/GL\
                    GLFW_LIB_DIR=/usr/lib/x86_64-linux-gnu\
                    PYTHON_INCL_DIR=/usr/include/python2.7\
                    PYTHON_LIB_DIR=/usr/lib/x86_64-linux-gnu\
                    BOOST_PYTHON_LIB_DIR=/usr/lib/x86_64-linux-gnu\
                    BOOST_PYTHON_LIB=-lboost_python\
                    NUMPY_INCL_DIR=/usr/lib/python2.7/dist-packages/numpy/core/include/numpy\
                    EPYDOC=/usr/bin/epydoc\
                    DOXYGEN=/usr/bin/doxygen"
HOUDINI_ARGS="      BOOST_INCL_DIR=/test/hou/toolkit/include\
                    BOOST_LIB_DIR=/test/hou/dsolib\
                    TBB_LIB_DIR=/test/hou/dsolib\
                    EXR_INCL_DIR=/test/hou/toolkit/include\
                    EXR_LIB_DIR=/test/hou/dsolib\
                    LOG4CPLUS_INCL_DIR=\
                    GLFW_INCL_DIR=\
                    PYTHON_INCL_DIR=\
                    DOXYGEN="

# Blosc
STANDALONE_BLOSC_ARGS=" BLOSC_INCL_DIR=/test/blosc/include\
                        BLOSC_LIB_DIR=/test/blosc/lib"
HOUDINI_BLOSC_ARGS="    BLOSC_INCL_DIR=/test/hou/toolkit/include\
                        BLOSC_LIB_DIR=/test/hou/dsolib"
NO_BLOSC_ARGS="         BLOSC_INCL_DIR=\
                        BLOSC_LIB_DIR="

HOUDINI_HAS_BOOST=$(echo "$HOUDINI_MAJOR < 16.5" | bc -l)

# zero ccache stats
ccache -z

if [ "$TASK" = "install" ]; then
    # introduce wrapper to compiler that uses ccache, this is mainly
    # for use in hcustom where changing the compiler is hard
    echo '#!/bin/bash' > $HOME/ccache_compiler
    echo 'export CCACHE_MAXSIZE=20G' >> $HOME/ccache_compiler
    if [ "$COMPILER" = "clang" ]; then
        echo 'ccache clang++ -Qunused-arguments $*' >> $HOME/ccache_compiler
    else
        if [ "$COMPILER" = "gcc" ]; then
            echo 'ccache g++ $*' >> $HOME/ccache_compiler
        fi
    fi
    chmod 755 $HOME/ccache_compiler
    # update OS
    sudo apt-get update
    # sym-link to reduce command word lengths
    sudo ln -s $PWD /test
    cd /test
    # install OpenVDB pre-requisites when built without Houdini (in order of Makefile)
    if [ "$HOUDINI_MAJOR" = "none" ]; then
        sudo apt-get install -y libboost-iostreams-dev
        sudo apt-get install -y libboost-system-dev
        sudo apt-get install -y libboost-thread-dev
        sudo apt-get install -y libtbb-dev
        # download and build Blosc 1.5.0  if required
        if [ "$BLOSC" = "yes" ]; then
            wget https://github.com/Blosc/c-blosc/archive/v1.5.0.zip
            unzip v1.5.0.zip
            cd c-blosc-1.5.0
            mkdir -p /test/blosc
            cmake -DCMAKE_INSTALL_PREFIX=/test/blosc
            make
            make install
            cd -
        fi
        # compile and install cppunit
        wget http://dev-www.libreoffice.org/src/cppunit-1.13.2.tar.gz
        tar -xvzf cppunit-1.13.2.tar.gz
        cd cppunit-1.13.2
        mkdir -p /test/cppunit
        ./configure --prefix=/test/cppunit
        make
        make install
        cd -
        sudo apt-get install -y liblog4cplus-dev
        sudo apt-get install -y libglfw3-dev
        sudo apt-get install -y python-dev
        sudo apt-get install -y libboost-python-dev
        sudo apt-get install -y python-numpy
        sudo apt-get install -y python-epydoc
        sudo apt-get install -y doxygen
    else
        # install houdini pre-requisites
        sudo apt-get install -y libxi-dev
        sudo apt-get install -y csh
        sudo apt-get install python-mechanize
        export PYTHONPATH=${PYTHONPATH}:/usr/lib/python2.7/dist-packages
        # download and unpack latest houdini headers and libraries from daily-builds
        python travis/travis.py $HOUDINI_MAJOR
        tar -xzf hou.tar.gz
        ln -s houdini* hou
        cd hou
        tar -xzf houdini.tar.gz
        cd -
        # copy libGL and libGLU and setup sym-links
        sudo apt-get install libglu1-mesa
        cp /usr/lib/x86_64-linux-gnu/libGLU.so* /test/hou/dsolib
        cp /usr/lib/x86_64-linux-gnu/mesa/libGL.so* /test/hou/dsolib
        sudo ln -s /test/hou/dsolib/libGLU.so.1 /test/hou/dsolib/libGLU.so
        sudo ln -s /test/hou/dsolib/libGL.so.1 /test/hou/dsolib/libGL.so
        # boost no longer shipped with Houdini from 16.5 onwards
        if [ $HOUDINI_HAS_BOOST -eq 0 ]; then
            sudo apt-get install -y libboost-iostreams-dev
            sudo apt-get install -y libboost-system-dev
            cp -r /usr/include/boost /test/hou/toolkit/include
            cp /usr/lib/x86_64-linux-gnu/libboost_iostreams.so* /test/hou/dsolib
            cp /usr/lib/x86_64-linux-gnu/libboost_system.so* /test/hou/dsolib
        fi
    fi
elif [ "$TASK" = "script" ]; then
    if [ "$HOUDINI_MAJOR" = "none" ]; then
        # release mode - build and run OpenVDB unit tests
        # debug mode - build OpenVDB unit tests
        if [ "$BLOSC" = "yes" ]; then
            if [ "$RELEASE" = "yes" ]; then
                make -C openvdb $COMMON_ARGS $STANDALONE_ARGS $STANDALONE_BLOSC_ARGS install abi="$ABI" -j4
                make -C openvdb $COMMON_ARGS $STANDALONE_ARGS $STANDALONE_BLOSC_ARGS test abi="$ABI" -j4
                # check for any indirect includes
                make -C openvdb $COMMON_ARGS $STANDALONE_ARGS $STANDALONE_BLOSC_ARGS header_test abi="$ABI" -j4
            else
                make -C openvdb $COMMON_ARGS $STANDALONE_ARGS $STANDALONE_BLOSC_ARGS install abi="$ABI" debug=yes -j4
            fi
        else
            if [ "$RELEASE" = "yes" ]; then
                make -C openvdb $COMMON_ARGS $STANDALONE_ARGS $NO_BLOSC_ARGS test abi="$ABI" -j4
            else
                make -C openvdb $COMMON_ARGS $STANDALONE_ARGS $NO_BLOSC_ARGS install abi="$ABI" debug=yes -j4
            fi
        fi
    else
        # source houdini_setup
        cd hou
        source houdini_setup
        cd -
        # disable hcustom tagging to remove timestamps in Houdini DSOs for ccache
        # note that this means the DSO can no longer be loaded in Houdini
        sed -i.bak 's/\/hcustom/\/hcustom -t/g' openvdb_houdini/Makefile
        # build OpenVDB core library and OpenVDB houdini library
        make -C openvdb $COMMON_ARGS $HOUDINI_ARGS $HOUDINI_BLOSC_ARGS install abi="$ABI" -j4
        make -C openvdb_houdini $COMMON_ARGS $HOUDINI_ARGS $HOUDINI_BLOSC_ARGS houdinilib abi="$ABI" -j4
        # manually install OpenVDB houdini headers and lib
        mkdir houdini_utils
        cp openvdb_houdini/houdini/*.h openvdb_houdini
        cp openvdb_houdini/houdini/*.h houdini_utils
        cp openvdb_houdini/libopenvdb_houdini* /tmp/OpenVDB/lib
        # build OpenVDB Houdini SOPs
        make -C openvdb_houdini $COMMON_ARGS $HOUDINI_ARGS $HOUDINI_BLOSC_ARGS install abi="$ABI" -j4
        # check for any indirect includes
        make -C openvdb_houdini $COMMON_ARGS $HOUDINI_ARGS $HOUDINI_BLOSC_ARGS header_test abi="$ABI" -j4
    fi
fi

# output ccache stats
ccache -s
